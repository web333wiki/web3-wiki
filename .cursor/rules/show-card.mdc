---
description: 
globs: 
alwaysApply: false
---
## Show Card Rules

### Card Overview

A `show-card` offers a detailed look at a specific project, tool, or service within the Web3 ecosystem. It functions as an informative and analytical resource, providing insights into the project's purpose, features, technology, and overall role in the Web3 space. The goal of a `show-card` is to be the primary reference for understanding the project in depth, covering its use cases, integrations, and significance.

### Core Requirements

When creating or updating `show-card` files, adhere to these core requirements:

- General Card Rules: Strictly follow all guidelines outlined in the `wiki-guide`. This is a fundamental requirement.
- Content Structure and Organization: Prioritize a logical and well-organized structure. The content must be easy to navigate, with clear headings and subheadings to enhance readability.
- Runnable Examples/Demos: Whenever practical, include a runnable example or demonstration of the project or tool. This allows users to grasp its practical application. If embedding a runnable version is not feasible, provide a direct link to a demo or example.
- Comparative Analysis: Include a section that discusses similar or competing projects. This helps users understand the project's positioning in the market and its key differentiators.

### Key Content Sections

This section details the recommended content areas for a `show-card`. While it's not mandatory to include every item, strive to cover as many as possible to create a comprehensive and valuable resource. Avoid generic descriptions or superficial content.

- Project Overview

  - Comprehensive Summary: Provide an in-depth summary of the project, tool, or service. Cover its history, core mission, operational context, and its importance within the Web3 ecosystem.
  - Problem Solved: Clearly define the specific problem(s) the project addresses and explain in detail _how_ it intends to provide solutions.
  - Value Proposition: Elaborate on the project's unique benefits, advantages, and key differentiators. Compare it with existing solutions where applicable.
  - Official Website: Include a direct link to the official project website.
  - Status & Roadmap: Describe the current development status (e.g., Live, Beta, In Development). List key historical dates/milestones and outline the public roadmap or future plans.
  - Team: Introduce core team members or key contributors. Highlight relevant experience and expertise if this information is public and significant.
  - Project History & Milestones: Detail the project's development journey, including key milestones, significant achievements, major releases, and pivotal moments. If available, outline future plans and the long-term vision.

- Key Services/Features

  - Detailed Breakdown: For each key service or feature, provide a thorough explanation. Ideally, dedicate a subsection to each significant feature for clarity, enabling readers to understand the project comprehensively. For each feature, include:
    - Description: A detailed account of the service/feature, including its purpose and functionality.
    - How it Works: Explain the underlying mechanisms, processes, or technologies that power this service/feature. This explanation should be more technical than the general description. Incorporate relevant technical details such as algorithms, protocols, or frameworks used. Consider using diagrams, code snippets, or flowcharts to illustrate complex concepts where appropriate.
    - User Experience (UX): Describe how users interact with this feature. Include any relevant user interface (UI) elements or workflows.
    - Benefits: Discuss the advantages of using this feature, emphasizing any unique selling points or differentiators.
    - Use Cases: Provide specific examples or scenarios where this feature proves beneficial. This can include real-world applications or illustrative hypothetical situations.

- Getting Started & Resources

  - Accessing the Project: Offer clear instructions on how to begin using the project/tool (e.g., web app URL, download links, API signup procedures).
  - Documentation: Link to official and comprehensive documentation.
  - Community Channels: Provide links to active, official community channels (e.g., Discord, Telegram, Forum).
  - Support Resources: Link to official support channels, FAQs, or knowledge bases.
  - Source Code: If the project is open-source, link to its primary code repositories (e.g., GitHub, GitLab) and state the main software license.

- Comparative Analysis (Optional but Highly Recommended)
  - Similar Projects or Concepts: Identify key similar or competing projects. Offer a balanced and detailed comparison, highlighting similarities, differences, respective strengths, weaknesses, and unique selling points. This section should provide readers with a clear understanding of the project's position relative to others in the ecosystem.
